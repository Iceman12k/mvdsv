dist: trusty

os:
  - linux

compiler:
  - gcc

language: c

env:
  global:
    DATE=$(date +%Y%m%d)
    TIME=$(date +%H%M%S)

jobs:
  include:
    - os: linux
      env: 
        TARGET=linux-amd64
        EXTENSION=
    - os: linux
      env:
        TARGET=linux-i686
        EXTENSION=
    - os: linux
      env:
        TARGET=linux-armhf
        EXTENSION=
    - os: linux
      env:
        TARGET=windows-x64
        EXTENSION=.exe
      addons:
        apt:
          packages:
            - mingw-w64
    - os: linux
      env:
        TARGET=windows-x86
        EXTENSION=.exe
      addons:
        apt:
          packages:
            - mingw-w64

addons:
  apt:
    update: true
    packages:
      build-essential
      python-virtualenv
      python3-dev
      python3-pip
      ninja-build
      cmake
      gcc-multilib

before_install:
  # ensure we do not have curl dev libs, otherwise it caused cross compilations to fail
  - sudo apt-get -y remove libcurl.*-dev libpcre*-dev
  # install cross compiler tools if we are going to compile binares for arm (notice it will remove gcc-multilib and creates a dependency issue if we try to install those packages with the others)
  - if [ -z "${TARGET##*arm*}" ]; then sudo apt-get -y install gcc-arm-linux-gnueabihf pkg-config-arm-linux-gnueabihf ;fi
  # activate virtualenv with python3, meson requires python3
  - virtualenv .venv --python=python3
  - . .venv/bin/activate
  - pip3 install --upgrade pip
  # install python packages like meson, ninja etc...
  - pip3 install -r requirements.txt
  # add SFTP authentication key to the build environment
  - openssl aes-256-cbc -K $encrypted_1e5406d6c11a_key -iv $encrypted_1e5406d6c11a_iv -in mvdsv_builds.key.enc -out mvdsv_builds.key -d
  # set correct permissions on private key
  - chmod 600 mvdsv_builds.key

script:
  # create build target directory and build binary
  - mkdir -p build_${TARGET}
  - meson build_${TARGET} --cross-file tools/cross-compilation/${TARGET}.txt
  - ninja -v -C build_${TARGET}
  # print basic info about compiled files
  - file build_${TARGET}/mvdsv${EXTENSION}
  # create hash for download verification
  - md5sum build_${TARGET}/mvdsv${EXTENSION} > build_${TARGET}/mvdsv.md5
    # create built items directories
  - mkdir -p built_assets/{commits,latest}/${TARGET}
  - if [ -n "${TRAVIS_TAG}" ]; then mkdir -p built_assets/stable/${TRAVIS_TAG} ;fi
  - mv build_${TARGET}/mvdsv${EXTENSION} built_assets/commits/${TARGET}/${DATE}_${TRAVIS_COMMIT:0:7}_mvdsv${EXTENSION}
  - mv build_${TARGET}/mvdsv.md5 built_assets/commits/${TARGET}/${DATE}_${TRAVIS_COMMIT:0:7}_mvdsv.md5
  # update stable links if necessary
  - if [ -n "${TRAVIS_TAG}" ]; then cp built_assets/commits/${TARGET}/${DATE}_${TRAVIS_COMMIT:0:7}_mvdsv${EXTENSION} built_assets/stable/${TRAVIS_TAG}/${TARGET}/mvdsv${EXTENSION} ;fi
  - if [ -n "${TRAVIS_TAG}" ]; then cp built_assets/commits/${TARGET}/${DATE}_${TRAVIS_COMMIT:0:7}_mvdsv.md5 built_assets/stable/${TRAVIS_TAG}/${TARGET}/mvdsv.md5 ;fi
  # update latest links
  - cp built_assets/commits/${TARGET}/${DATE}_${TRAVIS_COMMIT:0:7}_mvdsv${EXTENSION} built_assets/latest/${TARGET}/mvdsv${EXTENSION}
  - cp built_assets/commits/${TARGET}/${DATE}_${TRAVIS_COMMIT:0:7}_mvdsv.md5 built_assets/latest/${TARGET}/mvdsv.md5
  # push built items to SFTP storage
  - sftp -q -i mvdsv_builds.key -rp -o 'StrictHostKeyChecking no' -o 'UserKnownHostsFile /dev/null' -P ${SFTP_PORT} ${SFTP_USERNAME}@${SFTP_HOST}:/ <<< $'put -rp built_assets/*'
